#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2008 Adriano Monteiro Marques
#
# Author: Francesco Piccinno <stack.box@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

import os
import sys
import signal

try:
    if os.getenv('PM_NOPSYCO', False):
        raise ImportError

    import psyco
    psyco.profile()

    print "Hurray! psyco enabled!"
except ImportError:
    print "No psyco no party! :("

# used by exception hook
import cgitb
import tempfile

from PM.Core.I18N import _
from PM.Core.Const import PM_DEVELOPMENT, PM_VERSION

#########################

class PMExceptionHook(object):
    def __call__(self, etype, emsg, etb):
        import warnings
        warnings.filterwarnings("error", module = "gtk")

        try:
            import gtk
            import PM.higwidgets

            from PM.Gui.Core.BugReport import CrashReport
            from PM.higwidgets.higdialogs import HIGAlertDialog
        except Warning, e:
            print e.message
            sys.exit(-1)

        warnings.resetwarnings()

        gtk_version = "%s.%s.%s" % gtk.gtk_version
        pygtk_version = "%s.%s.%s" % gtk.ver
        higwidgets_version = getattr(PM.higwidgets, "__version__", "< 0.9.5")
        python_version = sys.version

        versions = _("Versions:\nGTK: %s\nPyGTK: %s\nHIGWidgets: %s\nPython: %s\nPacketManipulator: %s") % \
                   (gtk_version, pygtk_version, higwidgets_version, python_version, PM_VERSION)
        
        if etype == ImportError:
            d = HIGAlertDialog(type=gtk.MESSAGE_ERROR, message_format=_("Import error"),
                secondary_text=_("\nA required module was not found.\n\nError: %s" % emsg))

            d.run()
            d.destroy()

            return

        crash_text = cgitb.text((etype, emsg, etb))
        crash_text_dialog = "\n%s\n%s\n" % (versions, crash_text)
        crash_text= "{{{\n%s\n%s\n}}}" % (versions, crash_text)

        #Dialog info
        extrainfo_dialog = "%-17s %s\n%-17s %s\n%-17s %s\n%-17s %s\n" % (
            "sys.platform", sys.platform, "os.name", os.name, 
            "Gtk version", '.'.join(map(str, gtk.gtk_version)), 
            "PacketManipulator", PM_VERSION)
        crashmsg_dialog = "Crash Report\n%s\n%s\nDescription\n%s\n%s" % \
                        ('=' * 10, extrainfo_dialog, '-' * 20,\
                         crash_text_dialog)
        
        extrainfo = "%-17s %s\n[[BR]]%-17s %s\n[[BR]]%-17s %s[[BR]]\n" % (
            "sys.platform", sys.platform, "os.name", os.name, 
            "Umit version", PM_VERSION)
        crashmsg = "Crash Report\n[[BR]]%s[[BR]]\n[[BR]]%s\nDescription\n%s\n%s" % ('=' * 10, 
            extrainfo, '-' * 20, crash_text)

        try:
            try:
                cwin = CrashReport("PacketManipulator Crash - '%s'" % emsg, crashmsg,
                                   description_dialog=crashmsg_dialog)
                cwin.show_all()
                while True: 
                    # keeping running while bug report is not sent successfully,
                    # or until the user closes the window.
                    result = cwin.run()
                    if result in (gtk.RESPONSE_CANCEL,
                        gtk.RESPONSE_DELETE_EVENT,
                        gtk.RESPONSE_NONE):

                        cwin.destroy()
                        break
            except Exception, err:
                print err
                tempfd, tempname = tempfile.mkstemp()
                os.write(tempfd, crashmsg_dialog)
                d = HIGAlertDialog(type=gtk.MESSAGE_ERROR,
                    message_format=_("Bug not reported"),
                    secondary_text=_("A critical error occourried during "
                        "PacketManipulator execution, \nand it was not properly reported " 
                        "to our bug tracker. The crash description was saved to: "
                        "%s, so you can still report it on our bug "
                        "tracker.") % tempname)
                os.close(tempfd)
                d.run()
                d.destroy()
        finally:
            gtk.main_quit()

if PM_DEVELOPMENT:
    sys.excepthook = PMExceptionHook()

def main(args):
    from PM.Gui.Core.App import PMApp

    try:
        app = PMApp()
        app.run()
    except KeyboardInterrupt:
        sys.exit(signal.SIGINT)

if __name__ == "__main__":
    main(sys.argv)
