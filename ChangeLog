2009-06-13 Francesco Piccinno <stack.box@gmail.com>
    * attacks/run-tester.sh:
       - Simple attacktester.py runner to avoid setting PYTHONPATH at every
         run.
    * attacks/nose-tests.sh:
       - Simple launcher of nosetests to test the attacks by testing the
         doctest strings in main.py files.
    * attacks/attacktester.py:
       - Add interaction with PluginEngine().tree to let the plugin tested
         with the attacktester.py to have Core().get_need() fully working
         without having the mess to define a setup.py. Really usefull while
         developing and testing.
       - Add the possibility to change the configuration by passing set
         expressions separated with ',' on the command line prefixed with -s.
       - Add a --quiet options to avoid printing useless messages.
       - Add a --profile option that uses hotshot module to profile the code.
    * PM/Core/AttackUtils.py:
      - Add a module to holds utilities functions used in various attacks.
      - Add attack_unittest() function used by doctest of various attacks.
    * attacks/offline/ethernet/sources/main.py
      attacks/offline/ip/sources/main.py:
       - Switching from coroutine to classic approach.
    * attacks/offline/tcp/sources/main.py:
       - Switching from coroutine to classic approach.
       - Add checksum checking.
    * attacks/offline/fingerprint/sources/main.py:
       - Add passive fingerprint attack that uses the same approach and db of
         ettercap.
    * attacks/pcap-tests/wrong-checksum.pcap:
       - Create a pcap-test/ file to holds pcap files used for testing
         purposes.
       - Add a wrong-checksum.pcap file used by tcp, ip and fingerprint
         attacks.
    * PM/Manager/AttackManager.py:
       - Dropped coroutine approach for evident limitation on threaded context
         and poor performance. Now we use tradition callable.
       - Add Configuration object to centralize and made easier task to manage
         configurations from a plugin and his relative methods to the manager.
       - Add user_msg() function for communicating message to the user with
         the same approach of syslog (severity and facility).
       - Add add_decoder_hook() method to the manager to provide a pre/post
         hook set mechanism for decoders functions. This is used for example
         in the fingerprint offline attack.
       - Now AttackPlugin class has 2 additional methods register_options()
         and register_hooks().
    * PM/Core/Atoms.py:
       - Add ordered dict (odict) implementation to the Atoms module.
    * PM/Backend/Abstract/BaseContext/Timed.py:
       - print replaced with log.debug()
    * PM/Backend/Scapy/packet.py:
       - Add a cfields attribute to metapacket for managing custom fields
         created by attacks.
       - Add get_field(), set_cfield(), unset_cfield() functions.

    - General bug fixing.
    - Implemented custom fields by using a private dictionary.
    - Added nosetest architecture to test attacks by using doctest strings to
      speed up the development phase.

2009-06-07 Francesco Piccinno <stack.box@gmail.com>
    * PM/Gui/Pages/SniffPage.py:
       - Fixing a bug due to check_finished() called on context that doesn't
         provide, like Sequence.
    * PM/Gui/Pages/PacketPage.py:
       - Using get_raw() method instead of get_packet_raw()
    * PM/Gui/Pages/SequencePage.py:
       - 80 columns line wrap fix.
       - Switching to standard tooltip scheme instead of HIGTooltip.
       - Implemented a context menu to copy, delete and paste selected packet.
       - Fixed text label.
    * PM/Gui/Tabs/OperationsTab.py:
       - Fixing a bug due to not checking for the load()/save() correctness.
    * PM/Backend/Scapy/Context/Sequence.py:
       - Various bug fix. Fixing a regression that doesn't set the title
         after the file is saved.
    * PM/Backend/Scapy/Context/Sniff.py:
       - Fixing "9, Bad file descriptor" bug showed when the sniff session
         is stopped.
    * PM/Backend/Scapy/wrapper.py
      PM/Backend/Scapy/serialize.py:
       - Various fix.
       - Avoid to save not edited properties.
       - Using base64 to serialize field values.
    * PM/Core/Logger.py:
       - Adding a PM_NOCOLORTERM environment variable to avoid the use of
         colors on terminal.
    * PM/Backend/Scapy/utils.py:
       - Now the SendReceiveConsumer and SequenceConsumer could use the
         helpers.
    * PM/Manager/PreferenceManager.py
      PM/Gui/Dialogs/Preferences.py:
       - Introducing enumerator variables.
       - Add variables to manage the various capmethods.
    * PM/Backend/Scapy/packet.py:
       - Added a copy() function to MetaPacket.
    * PM/Gui/Tabs/ProtocolSelectorTab.py:
       - Fix wrong colorized rows when the packets are organized per layer.
    * PM/Gui/Core/MainWindow.py:
       - Fixing the size of the application by suggesting a default_size
       - Various fix to avoid exceptions if page remove are not a Session.
    * PM/Gui/Tabs/MainTab.py:
       - Sexy stuff like IntroPage introduced.

    - Bug fixing.
    - UI improvements.
    - Helper methods for SendReceiveContext and SequenceContext.

2009-06-02 Francesco Piccinno <stack.box@gmail.com>
    * attacks/offline/wifi/sources/main.py:
       - First (dummy) implementation of Wifi decoder module.
    * attacks/offline/ethernet/sources/main.py:
       - First implementation of Ethernet decoder module.
    * attacks/offline/ip/sources/main.py:
       - First implementation of IP decoder module.
    * attacks/offline/tcp/sources/main.py:
       - First implementation of TCP decoder module.
    * attacks/attacktester.py:
       - Simple script to test the decoders/dissectors/attacks from command
         line.
    * PM/Backend/Scapy/translator.py:
       - Global translator script for fields that does not respect wireshark
         visible filters nomenclature. (Used in get_field of MetaPacket)
    * PM/Backend/Scapy/wrapper.py:
       - Fixing a bug related to the wrong implementation of get_field_size.
    * PM/Backend/Scapy/packet.py:
       - Add get_raw_layer function.
       - Add get_field function that should respect wireshark filters.
       - Add get_datalink function to return the correct datalink for the
         selected packet.
    * PM/Core/NetConst.py:
       - Module that contains constants used in AttackFramework implementation.
    * PM/Manager/AttackManager.py:
       - Real code for AttackFramework idea.
       - Add coroutine decorator to create more performant filters, decoders
         or dissectors.
       - Add Decoder class if the OOP design is preferred.
       - Add AttackManager singleton class that contains all the references
         to decoders and filters used in PM.
       - Add AttackDispatcher class to separate the feed behaviour from the
         Singleton class. This lets you call various dispatcher without
         having the mess to create a single AttackManager for every invocation.
       - Add AttackPlugin as base class and the derived one OfflineAttack, 
         OnlineAttack.
       - Add AttackTester class used for testing purpose.

     - Scapy bugfixing.
     - First approach of AttackFramework idea.

2009-05-24  Francesco Piccinno  <stack.box@gmail.com>
    * PM/Gui/Widgets/Plotter.py
      PM/Gui/Widgets/PropertyGrid.py:
       - Fixing various bugs due to ConditionalField used by Scapy.
    * PM/Backend/Scapy/wrapper.py:
       - Added a new function is_showable_field() to manage this situation.
       - Various fix for ConditionalField.
    * PM/Backend/Scapy/packet.py:
       - Added rebuild_from_raw_payload() to MetaPacket.
    * PM/Gui/Pages/PacketPage.py:
       - Add the possibility to edit the packet directly from the HexView.
    * PM/Gui/Widgets/PyGtkHexView.py:
       - Added a popup menu for common actions like cut/copy/paste.
    * PM/Gui/Plugins/Network.py
      PM/Gui/Plugins/PathPage.py
      PM/Gui/Plugins/PluginPage.py
      PM/Gui/Plugins/Tree.py
      PM/Gui/Plugins/Update.py
      PM/Gui/Plugins/Containers.py
      PM/Gui/Plugins/Engine.py
      PM/Gui/Plugins/Window.py
      PM/Backend/Scapy/Context/Sniff.py
      PM/Backend/Scapy/utils.py:
        - Switch to new plugin schema.
    * plugins/geoip/setup.py
      plugins/traceroute/setup.py:
        - Fix the setup.py to fit schema change.

    - Insert mode for HexView implemented.
    - 80 columns line wrap fixed in various files and general bug fixing.

2009-05-19 Francesco Piccinno <stack.box@gmail.com>
    * PM/Backend/Scapy/Context/Sniff.py
      PM/Backend/Scapy/utils.py:
        - Moving helper related code to utils.
        - Various fix for win32. Now the dumpcap helper should work great.
          Windump seems to not print the packets captured on the stderr
          so not works as excepted.
    * PM/Gui/Dialogs/Interface.py:
        - Repopulate the store on capmethod changes. This is required for
          windows because tcpdump/dumpcap doesn't understand the interface
          nomenclature used by libdnet python binding.
    * PM/PacketManipulator:
        - Reverting to pygtk >= 2.10 requirement. 2.14 seems to be not
          available yet on windows.

    - Win32 fixes.

2009-05-18 Francesco Piccinno <stack.box@gmail.com>
    * PM/Backend/Scapy/Context/Sniff.py
      PM/Backend/Scapy/utils.py:
        - Moving all helper related code to utils.py to make SendReceive and
          SequenceConsumer benefit of it.
2009-05-17 Francesco Piccinno <stack.box@gmail.com>
    * PM/Gui/Dialogs/Preferences.py
      PM/Gui/Core/App.py
      PM/Gui/Manager/PreferenceManager.py:
        - Added a check for python version (that should be >= 2.6)
        - Making checks for root/correct python version optional by
          adding it in pm-prefs.xml file, and in SectionPage of
          Preference dialog.
    * PM/Gui/Core/MainWindow.py
      PM/Gui/Core/GdlPaned.py:
        - Added a gdl paned implementation. You need gnome-python-extra
          package to use that implementation.
    * TODO: Cleaned up
    * PM/Gui/pages/PacketPage.py
      PM/Gui/Widgets/PyGtkHexView.py:
        - Added a new implementation of read/write hex view.
    * PM/Backend/Scapy/packet.py:
        - Added new method get_protocol_bounds() to MetaPacket class.
    * PM/Backend/Scapy/wrapper.py:
        - Added new function get_proto_size() used by MetaPacket.
    * PM/Gui/Tabs/PropertyTab.py:
        - Now if the user select a protocol in the ProtocolHierarchy the
          selection will be propagated to the hexview with the same behaviour
          of field selection but for the entire protocol. See also wireshark.
    * PM/Gui/Widgets/PropertyGrid.py:
        - Added the possibility to use PyGtkHexView class to edit string fields
          that can't be converted to utf-8 string. This should close all bugs
          related to the missing read/write hexview implementation.

    - Fixed various bug and regression.
    - 80 columns line wrap fixed in various files.

2009-05-16 Francesco Piccinno <stack.box@gmail.com>

    * PacketManipulator:
        - Added --debug option to spawn a gdb session when the launcher is
          started.
    * PM/PacketManipulator:
        - now we require pygtk >= 2.14
    * PM/Gui/Pages/SniffPage.py:
        - 80 columns line wrap fixed.
        - Created two differents treemode to store informations (gtk.ListStore
          to improve the performance while sniffing, and gtk.TreeStore to have
          the possibility to use the flow organizer)
    * PM/Gui/Dialogs/Interface.py:
        - 80 columns line wrap fixed.
        - Added a new ComboBox to select the method to use for the SniffSession
        - Set a tooltip to the pcap filter info button
        - Fixed various alignment bugs.
    * PM/Gui/Dialogs/Preferences.py:
        - Adding a new 'Helpers' section letting the user choose the correct
          path for tcpdump and dumpcap programs.
    * PM/Backend/Scapy/Context/Sniff.py:
        - Adding the possibility to use tcpdump/pcap or virtual interface for
          sniffing to avoid performance problems or CPU burning as reported.

          These methods (tcpdump/dumpcap) should remove the risk of packet
          loss also, but uses a temporary file created with tempfile.mktemp()

          In this case we use fcntl to set O_NONBLOCK to stderr pipe created
          by the subprocess module. This code works on *NIX and *BSD systems
          that offers select() over simple file descriptor. I should implement
          the missing code for Windows system and use PeekNamedPipe.
        - Implemented error propagation trough exit_from_thread() method
    * PM/Backend/Scapy/Context/Static.py:
        - Avoid a cumulative call to PacketList constructor to reduce memory
          usage.

    - Various bugfix.

2009-05-11 Francesco Piccinno <stack.box@gmail.com>

    - Init ChangeLog.
